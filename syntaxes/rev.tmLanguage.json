{
	"scopeName": "source.rev",
	"patterns": [
	  {
		"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\.[a-zA-Z_][a-zA-Z0-9_]*\\s*\\(",
		"name": "variable.function.rev"
	  },
	  {
		"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*\\(",
		"name": "support.function.rev"
	  },
	  {
		"match": "\\b(if|else|for|while|return)\\b",
		"name": "keyword.control.rev"
	  },
	  {
		"match": "\\b(TRUE|FALSE)\\b",
		"name": "constant.language.boolean.rev"
	  },
	  {
		"match": "<-|=|:=|~",
		"name": "keyword.operator.assignment.rev"
	  },
	  {
		"match": "[+\\-*/]",
		"name": "keyword.operator.arithmetic.rev"
	  },
	  {
		"match": "[&|!]",
		"name": "keyword.operator.logical.rev"
	  },
	  {
		"match": "==|!=|<=|>=",
		"name": "keyword.operator.comparison.rev"
	  },
	  {
		"match": "\"(.*?)\"",
		"name": "string.quoted.double.rev"
	  },
	  {
		"match": "'(.*?)'",
		"name": "string.quoted.single.rev"
	  },
	  {
		"match": "#.*$",
		"name": "comment.line.double-slash.rev"
	  },
	  {
		"match": "\\b[0-9]+(\\.[0-9]+)?\\b",
		"name": "constant.numeric.rev"
	  },
	  {
		"match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b",
		"name": "variable.other.readwrite.rev"
	  }
	]
  }
  